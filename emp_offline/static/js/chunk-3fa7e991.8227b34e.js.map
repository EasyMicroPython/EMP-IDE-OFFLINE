{"version":3,"sources":["webpack:///./node_modules/_core-js@2.6.0@core-js/modules/es6.regexp.replace.js","webpack:///./node_modules/_core-js@2.6.0@core-js/modules/_regexp-exec-abstract.js","webpack:///./node_modules/_core-js@2.6.0@core-js/modules/_fix-re-wks.js","webpack:///./node_modules/_core-js@2.6.0@core-js/modules/_regexp-exec.js","webpack:///./node_modules/_core-js@2.6.0@core-js/modules/_advance-string-index.js","webpack:///./node_modules/_core-js@2.6.0@core-js/modules/_flags.js","webpack:///./node_modules/_core-js@2.6.0@core-js/modules/es6.regexp.exec.js","webpack:///./src/pages/ide/components/Editor/signals.js","webpack:///./node_modules/_core-js@2.6.0@core-js/modules/_string-at.js"],"names":["anObject","__webpack_require__","toObject","toLength","toInteger","advanceStringIndex","regExpExec","max","Math","min","floor","SUBSTITUTION_SYMBOLS","SUBSTITUTION_SYMBOLS_NO_NAMED","maybeToString","it","undefined","String","defined","REPLACE","$replace","maybeCallNative","searchValue","replaceValue","O","this","fn","call","regexp","res","done","value","rx","S","functionalReplace","global","fullUnicode","unicode","lastIndex","results","result","push","matchStr","accumulatedResult","nextSourcePosition","i","length","matched","position","index","captures","j","namedCaptures","groups","replacerArgs","concat","replacement","apply","getSubstitution","slice","str","tailPos","m","symbols","match","ch","capture","charAt","n","f","classof","builtinExec","RegExp","prototype","exec","module","exports","R","TypeError","redefine","hide","fails","wks","regexpExec","SPECIES","REPLACE_SUPPORTS_NAMED_GROUPS","re","a","replace","SPLIT_WORKS_WITH_OVERWRITTEN_EXEC","originalExec","arguments","split","KEY","SYMBOL","DELEGATES_TO_SYMBOL","DELEGATES_TO_EXEC","execCalled","constructor","nativeRegExpMethod","fns","nativeMethod","arg2","forceStringMethod","strfn","rxfn","string","arg","regexpFlags","nativeExec","nativeReplace","patchedExec","LAST_INDEX","UPDATES_LAST_INDEX_WRONG","re1","re2","NPCG_INCLUDED","PATCH","reCopy","source","at","that","ignoreCase","multiline","sticky","target","proto","forced","signals","methods","SIGNAL_CLEAR_TERM","sender","receiver","slot","event","kwargs","who","SIGNAL_UNLOCK","SIGNAL_SAVE_FILE","fileData","TextEncoder","encode","code","filename","openedFile","TO_STRING","pos","b","s","l","charCodeAt"],"mappings":"kHAEA,IAAAA,EAAeC,EAAQ,QACvBC,EAAeD,EAAQ,QACvBE,EAAeF,EAAQ,QACvBG,EAAgBH,EAAQ,QACxBI,EAAyBJ,EAAQ,QACjCK,EAAiBL,EAAQ,QACzBM,EAAAC,KAAAD,IACAE,EAAAD,KAAAC,IACAC,EAAAF,KAAAE,MACAC,EAAA,4BACAC,EAAA,oBAEAC,EAAA,SAAAC,GACA,YAAAC,IAAAD,IAAAE,OAAAF,IAIAb,EAAQ,OAARA,CAAuB,qBAAAgB,EAAAC,EAAAC,EAAAC,GACvB,OAGA,SAAAC,EAAAC,GACA,IAAAC,EAAAN,EAAAO,MACAC,OAAAV,GAAAM,OAAAN,EAAAM,EAAAH,GACA,YAAAH,IAAAU,EACAA,EAAAC,KAAAL,EAAAE,EAAAD,GACAH,EAAAO,KAAAV,OAAAO,GAAAF,EAAAC,IAIA,SAAAK,EAAAL,GACA,IAAAM,EAAAR,EAAAD,EAAAQ,EAAAH,KAAAF,GACA,GAAAM,EAAAC,KAAA,OAAAD,EAAAE,MAEA,IAAAC,EAAA/B,EAAA2B,GACAK,EAAAhB,OAAAQ,MACAS,EAAA,oBAAAX,EACAW,IAAAX,EAAAN,OAAAM,IACA,IAAAY,EAAAH,EAAAG,OACA,GAAAA,EAAA,CACA,IAAAC,EAAAJ,EAAAK,QACAL,EAAAM,UAAA,EAEA,IAAAC,EAAA,GACA,SACA,IAAAC,EAAAjC,EAAAyB,EAAAC,GACA,UAAAO,EAAA,MAEA,GADAD,EAAAE,KAAAD,IACAL,EAAA,MACA,IAAAO,EAAAzB,OAAAuB,EAAA,IACA,KAAAE,IAAAV,EAAAM,UAAAhC,EAAA2B,EAAA7B,EAAA4B,EAAAM,WAAAF,IAIA,IAFA,IAAAO,EAAA,GACAC,EAAA,EACAC,EAAA,EAAqBA,EAAAN,EAAAO,OAAoBD,IAAA,CACzCL,EAAAD,EAAAM,GASA,IARA,IAAAE,EAAA9B,OAAAuB,EAAA,IACAQ,EAAAxC,EAAAE,EAAAL,EAAAmC,EAAAS,OAAAhB,EAAAa,QAAA,GACAI,EAAA,GAMAC,EAAA,EAAuBA,EAAAX,EAAAM,OAAmBK,IAAAD,EAAAT,KAAA3B,EAAA0B,EAAAW,KAC1C,IAAAC,EAAAZ,EAAAa,OACA,GAAAnB,EAAA,CACA,IAAAoB,EAAA,CAAAP,GAAAQ,OAAAL,EAAAF,EAAAf,QACAjB,IAAAoC,GAAAE,EAAAb,KAAAW,GACA,IAAAI,EAAAvC,OAAAM,EAAAkC,WAAAzC,EAAAsC,SAEAE,EAAAE,EAAAX,EAAAd,EAAAe,EAAAE,EAAAE,EAAA7B,GAEAyB,GAAAJ,IACAD,GAAAV,EAAA0B,MAAAf,EAAAI,GAAAQ,EACAZ,EAAAI,EAAAD,EAAAD,QAGA,OAAAH,EAAAV,EAAA0B,MAAAf,KAKA,SAAAc,EAAAX,EAAAa,EAAAZ,EAAAE,EAAAE,EAAAI,GACA,IAAAK,EAAAb,EAAAD,EAAAD,OACAgB,EAAAZ,EAAAJ,OACAiB,EAAAlD,EAKA,YAJAG,IAAAoC,IACAA,EAAAjD,EAAAiD,GACAW,EAAAnD,GAEAQ,EAAAO,KAAA6B,EAAAO,EAAA,SAAAC,EAAAC,GACA,IAAAC,EACA,OAAAD,EAAAE,OAAA,IACA,kBACA,eAAApB,EACA,eAAAa,EAAAD,MAAA,EAAAX,GACA,eAAAY,EAAAD,MAAAE,GACA,QACAK,EAAAd,EAAAa,EAAAN,MAAA,OACA,MACA,QACA,IAAAS,GAAAH,EACA,OAAAG,EAAA,OAAAH,EACA,GAAAG,EAAAN,EAAA,CACA,IAAAO,EAAA1D,EAAAyD,EAAA,IACA,WAAAC,EAAAJ,EACAI,GAAAP,OAAA9C,IAAAkC,EAAAmB,EAAA,GAAAJ,EAAAE,OAAA,GAAAjB,EAAAmB,EAAA,GAAAJ,EAAAE,OAAA,GACAF,EAEAC,EAAAhB,EAAAkB,EAAA,GAEA,YAAApD,IAAAkD,EAAA,GAAAA,4CChHA,IAAAI,EAAcpE,EAAQ,QACtBqE,EAAAC,OAAAC,UAAAC,KAIAC,EAAAC,QAAA,SAAAC,EAAA5C,GACA,IAAAyC,EAAAG,EAAAH,KACA,uBAAAA,EAAA,CACA,IAAAlC,EAAAkC,EAAA/C,KAAAkD,EAAA5C,GACA,qBAAAO,EACA,UAAAsC,UAAA,sEAEA,OAAAtC,EAEA,cAAA8B,EAAAO,GACA,UAAAC,UAAA,+CAEA,OAAAP,EAAA5C,KAAAkD,EAAA5C,yCClBA/B,EAAQ,QACR,IAAA6E,EAAe7E,EAAQ,QACvB8E,EAAW9E,EAAQ,QACnB+E,EAAY/E,EAAQ,QACpBgB,EAAchB,EAAQ,QACtBgF,EAAUhF,EAAQ,QAClBiF,EAAiBjF,EAAQ,QAEzBkF,EAAAF,EAAA,WAEAG,GAAAJ,EAAA,WAIA,IAAAK,EAAA,IAMA,OALAA,EAAAZ,KAAA,WACA,IAAAlC,EAAA,GAEA,OADAA,EAAAa,OAAA,CAAqBkC,EAAA,KACrB/C,GAEA,SAAAgD,QAAAF,EAAA,UAGAG,EAAA,WAEA,IAAAH,EAAA,OACAI,EAAAJ,EAAAZ,KACAY,EAAAZ,KAAA,WAAyB,OAAAgB,EAAAjC,MAAAhC,KAAAkE,YACzB,IAAAnD,EAAA,KAAAoD,MAAAN,GACA,WAAA9C,EAAAM,QAAA,MAAAN,EAAA,UAAAA,EAAA,GANA,GASAmC,EAAAC,QAAA,SAAAiB,EAAA/C,EAAA4B,GACA,IAAAoB,EAAAZ,EAAAW,GAEAE,GAAAd,EAAA,WAEA,IAAAzD,EAAA,GAEA,OADAA,EAAAsE,GAAA,WAA6B,UAC7B,MAAAD,GAAArE,KAGAwE,EAAAD,GAAAd,EAAA,WAEA,IAAAgB,GAAA,EACAX,EAAA,IASA,OARAA,EAAAZ,KAAA,WAA8C,OAAnBuB,GAAA,EAAmB,MAC9C,UAAAJ,IAGAP,EAAAY,YAAA,GACAZ,EAAAY,YAAAd,GAAA,WAA6C,OAAAE,IAE7CA,EAAAQ,GAAA,KACAG,SACGjF,EAEH,IACA+E,IACAC,GACA,YAAAH,IAAAR,GACA,UAAAQ,IAAAJ,EACA,CACA,IAAAU,EAAA,IAAAL,GACAM,EAAA1B,EACAxD,EACA4E,EACA,GAAAD,GACA,SAAAQ,EAAAzE,EAAAgC,EAAA0C,EAAAC,GACA,OAAA3E,EAAA8C,OAAAS,EACAY,IAAAQ,EAIA,CAAoBzE,MAAA,EAAAC,MAAAoE,EAAAxE,KAAAC,EAAAgC,EAAA0C,IAEpB,CAAkBxE,MAAA,EAAAC,MAAAsE,EAAA1E,KAAAiC,EAAAhC,EAAA0E,IAElB,CAAgBxE,MAAA,KAGhB0E,EAAAJ,EAAA,GACAK,EAAAL,EAAA,GAEArB,EAAA9D,OAAAwD,UAAAoB,EAAAW,GACAxB,EAAAR,OAAAC,UAAAqB,EAAA,GAAAhD,EAGA,SAAA4D,EAAAC,GAAgC,OAAAF,EAAA9E,KAAA+E,EAAAjF,KAAAkF,IAGhC,SAAAD,GAA2B,OAAAD,EAAA9E,KAAA+E,EAAAjF,6CC1F3B,IAAAmF,EAAkB1G,EAAQ,QAE1B2G,EAAArC,OAAAC,UAAAC,KAIAoC,EAAA7F,OAAAwD,UAAAe,QAEAuB,EAAAF,EAEAG,EAAA,YAEAC,EAAA,WACA,IAAAC,EAAA,IACAC,EAAA,MAGA,OAFAN,EAAAlF,KAAAuF,EAAA,KACAL,EAAAlF,KAAAwF,EAAA,KACA,IAAAD,EAAAF,IAAA,IAAAG,EAAAH,GALA,GASAI,OAAApG,IAAA,OAAA0D,KAAA,OAEA2C,EAAAJ,GAAAG,EAEAC,IACAN,EAAA,SAAAnD,GACA,IACAtB,EAAAgF,EAAAtD,EAAAnB,EADAyC,EAAA7D,KAwBA,OArBA2F,IACAE,EAAA,IAAA9C,OAAA,IAAAc,EAAAiC,OAAA,WAAAX,EAAAjF,KAAA2D,KAEA2B,IAAA3E,EAAAgD,EAAA0B,IAEAhD,EAAA6C,EAAAlF,KAAA2D,EAAA1B,GAEAqD,GAAAjD,IACAsB,EAAA0B,GAAA1B,EAAAnD,OAAA6B,EAAAf,MAAAe,EAAA,GAAAlB,OAAAR,GAEA8E,GAAApD,KAAAlB,OAAA,GAIAgE,EAAAnF,KAAAqC,EAAA,GAAAsD,EAAA,WACA,IAAAzE,EAAA,EAAmBA,EAAA8C,UAAA7C,OAAA,EAA0BD,SAC7C7B,IAAA2E,UAAA9C,KAAAmB,EAAAnB,QAAA7B,KAKAgD,IAIAW,EAAAC,QAAAmC,qCCxDA,IAAAS,EAAStH,EAAQ,OAARA,EAAsB,GAI/ByE,EAAAC,QAAA,SAAA3C,EAAAgB,EAAAZ,GACA,OAAAY,GAAAZ,EAAAmF,EAAAvF,EAAAgB,GAAAH,OAAA,uCCJA,IAAA7C,EAAeC,EAAQ,QACvByE,EAAAC,QAAA,WACA,IAAA6C,EAAAxH,EAAAwB,MACAe,EAAA,GAMA,OALAiF,EAAAtF,SAAAK,GAAA,KACAiF,EAAAC,aAAAlF,GAAA,KACAiF,EAAAE,YAAAnF,GAAA,KACAiF,EAAApF,UAAAG,GAAA,KACAiF,EAAAG,SAAApF,GAAA,KACAA,sCCVA,IAAA2C,EAAiBjF,EAAQ,QACzBA,EAAQ,OAARA,CAAmB,CACnB2H,OAAA,SACAC,OAAA,EACAC,OAAA5C,IAAA,IAAAT,MACC,CACDA,KAAAS,4DCPI6C,EAAU,CACZC,QAAS,CACPC,kBADO,SACWC,GAAkD,IAA1CC,EAA0CzC,UAAA7C,OAAA,QAAA9B,IAAA2E,UAAA,GAAAA,UAAA,GAA/B,MAAO0C,EAAwB1C,UAAA7C,OAAA,QAAA9B,IAAA2E,UAAA,GAAAA,UAAA,GAAjB,gBACjD,MAAO,CACL2C,MAAO,YACPH,OAAQA,EACRC,SAAUA,EACVC,KAAMA,EACNE,OAAQ,CACNC,IAAK,YAIXC,cAZO,SAYON,GAAiD,IAAzCC,EAAyCzC,UAAA7C,OAAA,QAAA9B,IAAA2E,UAAA,GAAAA,UAAA,GAA9B,SAAU0C,EAAoB1C,UAAA7C,OAAA,QAAA9B,IAAA2E,UAAA,GAAAA,UAAA,GAAb,aAChD,MAAO,CACL2C,MAAO,SACPH,OAAQA,EACRC,SAAUA,EACVC,KAAMA,EACNE,OAAQ,KAIZG,iBAtBO,SAsBUP,GAA+C,IAAvCC,EAAuCzC,UAAA7C,OAAA,QAAA9B,IAAA2E,UAAA,GAAAA,UAAA,GAA5B,MAAO0C,EAAqB1C,UAAA7C,OAAA,QAAA9B,IAAA2E,UAAA,GAAAA,UAAA,GAAd,cAC5CgD,GAAW,IAAIC,aAAcC,OAC/BpH,KAAKqH,KAAKtD,QAAQ,QAAS,OAG7B,MAAO,CACL8C,MAAO,WACPH,OAAQA,EACRC,SAAUA,EACVC,KAAMA,EACNE,OAAQ,CACNQ,SAAUtH,KAAKuH,WACfL,SAAUA,OAQLX,qCC3Cf,IAAA3H,EAAgBH,EAAQ,QACxBgB,EAAchB,EAAQ,QAGtByE,EAAAC,QAAA,SAAAqE,GACA,gBAAAxB,EAAAyB,GACA,IAGA3D,EAAA4D,EAHAC,EAAAnI,OAAAC,EAAAuG,IACA5E,EAAAxC,EAAA6I,GACAG,EAAAD,EAAAtG,OAEA,OAAAD,EAAA,GAAAA,GAAAwG,EAAAJ,EAAA,QAAAjI,GACAuE,EAAA6D,EAAAE,WAAAzG,GACA0C,EAAA,OAAAA,EAAA,OAAA1C,EAAA,IAAAwG,IAAAF,EAAAC,EAAAE,WAAAzG,EAAA,WAAAsG,EAAA,MACAF,EAAAG,EAAAjF,OAAAtB,GAAA0C,EACA0D,EAAAG,EAAAzF,MAAAd,IAAA,GAAAsG,EAAA,OAAA5D,EAAA","file":"js/chunk-3fa7e991.8227b34e.js","sourcesContent":["'use strict';\n\nvar anObject = require('./_an-object');\nvar toObject = require('./_to-object');\nvar toLength = require('./_to-length');\nvar toInteger = require('./_to-integer');\nvar advanceStringIndex = require('./_advance-string-index');\nvar regExpExec = require('./_regexp-exec-abstract');\nvar max = Math.max;\nvar min = Math.min;\nvar floor = Math.floor;\nvar SUBSTITUTION_SYMBOLS = /\\$([$&`']|\\d\\d?|<[^>]*>)/g;\nvar SUBSTITUTION_SYMBOLS_NO_NAMED = /\\$([$&`']|\\d\\d?)/g;\n\nvar maybeToString = function (it) {\n  return it === undefined ? it : String(it);\n};\n\n// @@replace logic\nrequire('./_fix-re-wks')('replace', 2, function (defined, REPLACE, $replace, maybeCallNative) {\n  return [\n    // `String.prototype.replace` method\n    // https://tc39.github.io/ecma262/#sec-string.prototype.replace\n    function replace(searchValue, replaceValue) {\n      var O = defined(this);\n      var fn = searchValue == undefined ? undefined : searchValue[REPLACE];\n      return fn !== undefined\n        ? fn.call(searchValue, O, replaceValue)\n        : $replace.call(String(O), searchValue, replaceValue);\n    },\n    // `RegExp.prototype[@@replace]` method\n    // https://tc39.github.io/ecma262/#sec-regexp.prototype-@@replace\n    function (regexp, replaceValue) {\n      var res = maybeCallNative($replace, regexp, this, replaceValue);\n      if (res.done) return res.value;\n\n      var rx = anObject(regexp);\n      var S = String(this);\n      var functionalReplace = typeof replaceValue === 'function';\n      if (!functionalReplace) replaceValue = String(replaceValue);\n      var global = rx.global;\n      if (global) {\n        var fullUnicode = rx.unicode;\n        rx.lastIndex = 0;\n      }\n      var results = [];\n      while (true) {\n        var result = regExpExec(rx, S);\n        if (result === null) break;\n        results.push(result);\n        if (!global) break;\n        var matchStr = String(result[0]);\n        if (matchStr === '') rx.lastIndex = advanceStringIndex(S, toLength(rx.lastIndex), fullUnicode);\n      }\n      var accumulatedResult = '';\n      var nextSourcePosition = 0;\n      for (var i = 0; i < results.length; i++) {\n        result = results[i];\n        var matched = String(result[0]);\n        var position = max(min(toInteger(result.index), S.length), 0);\n        var captures = [];\n        // NOTE: This is equivalent to\n        //   captures = result.slice(1).map(maybeToString)\n        // but for some reason `nativeSlice.call(result, 1, result.length)` (called in\n        // the slice polyfill when slicing native arrays) \"doesn't work\" in safari 9 and\n        // causes a crash (https://pastebin.com/N21QzeQA) when trying to debug it.\n        for (var j = 1; j < result.length; j++) captures.push(maybeToString(result[j]));\n        var namedCaptures = result.groups;\n        if (functionalReplace) {\n          var replacerArgs = [matched].concat(captures, position, S);\n          if (namedCaptures !== undefined) replacerArgs.push(namedCaptures);\n          var replacement = String(replaceValue.apply(undefined, replacerArgs));\n        } else {\n          replacement = getSubstitution(matched, S, position, captures, namedCaptures, replaceValue);\n        }\n        if (position >= nextSourcePosition) {\n          accumulatedResult += S.slice(nextSourcePosition, position) + replacement;\n          nextSourcePosition = position + matched.length;\n        }\n      }\n      return accumulatedResult + S.slice(nextSourcePosition);\n    }\n  ];\n\n    // https://tc39.github.io/ecma262/#sec-getsubstitution\n  function getSubstitution(matched, str, position, captures, namedCaptures, replacement) {\n    var tailPos = position + matched.length;\n    var m = captures.length;\n    var symbols = SUBSTITUTION_SYMBOLS_NO_NAMED;\n    if (namedCaptures !== undefined) {\n      namedCaptures = toObject(namedCaptures);\n      symbols = SUBSTITUTION_SYMBOLS;\n    }\n    return $replace.call(replacement, symbols, function (match, ch) {\n      var capture;\n      switch (ch.charAt(0)) {\n        case '$': return '$';\n        case '&': return matched;\n        case '`': return str.slice(0, position);\n        case \"'\": return str.slice(tailPos);\n        case '<':\n          capture = namedCaptures[ch.slice(1, -1)];\n          break;\n        default: // \\d\\d?\n          var n = +ch;\n          if (n === 0) return ch;\n          if (n > m) {\n            var f = floor(n / 10);\n            if (f === 0) return ch;\n            if (f <= m) return captures[f - 1] === undefined ? ch.charAt(1) : captures[f - 1] + ch.charAt(1);\n            return ch;\n          }\n          capture = captures[n - 1];\n      }\n      return capture === undefined ? '' : capture;\n    });\n  }\n});\n","'use strict';\n\nvar classof = require('./_classof');\nvar builtinExec = RegExp.prototype.exec;\n\n // `RegExpExec` abstract operation\n// https://tc39.github.io/ecma262/#sec-regexpexec\nmodule.exports = function (R, S) {\n  var exec = R.exec;\n  if (typeof exec === 'function') {\n    var result = exec.call(R, S);\n    if (typeof result !== 'object') {\n      throw new TypeError('RegExp exec method returned something other than an Object or null');\n    }\n    return result;\n  }\n  if (classof(R) !== 'RegExp') {\n    throw new TypeError('RegExp#exec called on incompatible receiver');\n  }\n  return builtinExec.call(R, S);\n};\n","'use strict';\nrequire('./es6.regexp.exec');\nvar redefine = require('./_redefine');\nvar hide = require('./_hide');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar wks = require('./_wks');\nvar regexpExec = require('./_regexp-exec');\n\nvar SPECIES = wks('species');\n\nvar REPLACE_SUPPORTS_NAMED_GROUPS = !fails(function () {\n  // #replace needs built-in support for named groups.\n  // #match works fine because it just return the exec results, even if it has\n  // a \"grops\" property.\n  var re = /./;\n  re.exec = function () {\n    var result = [];\n    result.groups = { a: '7' };\n    return result;\n  };\n  return ''.replace(re, '$<a>') !== '7';\n});\n\nvar SPLIT_WORKS_WITH_OVERWRITTEN_EXEC = (function () {\n  // Chrome 51 has a buggy \"split\" implementation when RegExp#exec !== nativeExec\n  var re = /(?:)/;\n  var originalExec = re.exec;\n  re.exec = function () { return originalExec.apply(this, arguments); };\n  var result = 'ab'.split(re);\n  return result.length === 2 && result[0] === 'a' && result[1] === 'b';\n})();\n\nmodule.exports = function (KEY, length, exec) {\n  var SYMBOL = wks(KEY);\n\n  var DELEGATES_TO_SYMBOL = !fails(function () {\n    // String methods call symbol-named RegEp methods\n    var O = {};\n    O[SYMBOL] = function () { return 7; };\n    return ''[KEY](O) != 7;\n  });\n\n  var DELEGATES_TO_EXEC = DELEGATES_TO_SYMBOL ? !fails(function () {\n    // Symbol-named RegExp methods call .exec\n    var execCalled = false;\n    var re = /a/;\n    re.exec = function () { execCalled = true; return null; };\n    if (KEY === 'split') {\n      // RegExp[@@split] doesn't call the regex's exec method, but first creates\n      // a new one. We need to return the patched regex when creating the new one.\n      re.constructor = {};\n      re.constructor[SPECIES] = function () { return re; };\n    }\n    re[SYMBOL]('');\n    return !execCalled;\n  }) : undefined;\n\n  if (\n    !DELEGATES_TO_SYMBOL ||\n    !DELEGATES_TO_EXEC ||\n    (KEY === 'replace' && !REPLACE_SUPPORTS_NAMED_GROUPS) ||\n    (KEY === 'split' && !SPLIT_WORKS_WITH_OVERWRITTEN_EXEC)\n  ) {\n    var nativeRegExpMethod = /./[SYMBOL];\n    var fns = exec(\n      defined,\n      SYMBOL,\n      ''[KEY],\n      function maybeCallNative(nativeMethod, regexp, str, arg2, forceStringMethod) {\n        if (regexp.exec === regexpExec) {\n          if (DELEGATES_TO_SYMBOL && !forceStringMethod) {\n            // The native String method already delegates to @@method (this\n            // polyfilled function), leasing to infinite recursion.\n            // We avoid it by directly calling the native @@method method.\n            return { done: true, value: nativeRegExpMethod.call(regexp, str, arg2) };\n          }\n          return { done: true, value: nativeMethod.call(str, regexp, arg2) };\n        }\n        return { done: false };\n      }\n    );\n    var strfn = fns[0];\n    var rxfn = fns[1];\n\n    redefine(String.prototype, KEY, strfn);\n    hide(RegExp.prototype, SYMBOL, length == 2\n      // 21.2.5.8 RegExp.prototype[@@replace](string, replaceValue)\n      // 21.2.5.11 RegExp.prototype[@@split](string, limit)\n      ? function (string, arg) { return rxfn.call(string, this, arg); }\n      // 21.2.5.6 RegExp.prototype[@@match](string)\n      // 21.2.5.9 RegExp.prototype[@@search](string)\n      : function (string) { return rxfn.call(string, this); }\n    );\n  }\n};\n","'use strict';\n\nvar regexpFlags = require('./_flags');\n\nvar nativeExec = RegExp.prototype.exec;\n// This always refers to the native implementation, because the\n// String#replace polyfill uses ./fix-regexp-well-known-symbol-logic.js,\n// which loads this file before patching the method.\nvar nativeReplace = String.prototype.replace;\n\nvar patchedExec = nativeExec;\n\nvar LAST_INDEX = 'lastIndex';\n\nvar UPDATES_LAST_INDEX_WRONG = (function () {\n  var re1 = /a/,\n      re2 = /b*/g;\n  nativeExec.call(re1, 'a');\n  nativeExec.call(re2, 'a');\n  return re1[LAST_INDEX] !== 0 || re2[LAST_INDEX] !== 0;\n})();\n\n// nonparticipating capturing group, copied from es5-shim's String#split patch.\nvar NPCG_INCLUDED = /()??/.exec('')[1] !== undefined;\n\nvar PATCH = UPDATES_LAST_INDEX_WRONG || NPCG_INCLUDED;\n\nif (PATCH) {\n  patchedExec = function exec(str) {\n    var re = this;\n    var lastIndex, reCopy, match, i;\n\n    if (NPCG_INCLUDED) {\n      reCopy = new RegExp('^' + re.source + '$(?!\\\\s)', regexpFlags.call(re));\n    }\n    if (UPDATES_LAST_INDEX_WRONG) lastIndex = re[LAST_INDEX];\n\n    match = nativeExec.call(re, str);\n\n    if (UPDATES_LAST_INDEX_WRONG && match) {\n      re[LAST_INDEX] = re.global ? match.index + match[0].length : lastIndex;\n    }\n    if (NPCG_INCLUDED && match && match.length > 1) {\n      // Fix browsers whose `exec` methods don't consistently return `undefined`\n      // for NPCG, like IE8. NOTE: This doesn' work for /(.?)?/\n      // eslint-disable-next-line no-loop-func\n      nativeReplace.call(match[0], reCopy, function () {\n        for (i = 1; i < arguments.length - 2; i++) {\n          if (arguments[i] === undefined) match[i] = undefined;\n        }\n      });\n    }\n\n    return match;\n  };\n}\n\nmodule.exports = patchedExec;\n","'use strict';\nvar at = require('./_string-at')(true);\n\n // `AdvanceStringIndex` abstract operation\n// https://tc39.github.io/ecma262/#sec-advancestringindex\nmodule.exports = function (S, index, unicode) {\n  return index + (unicode ? at(S, index).length : 1);\n};\n","'use strict';\n// 21.2.5.3 get RegExp.prototype.flags\nvar anObject = require('./_an-object');\nmodule.exports = function () {\n  var that = anObject(this);\n  var result = '';\n  if (that.global) result += 'g';\n  if (that.ignoreCase) result += 'i';\n  if (that.multiline) result += 'm';\n  if (that.unicode) result += 'u';\n  if (that.sticky) result += 'y';\n  return result;\n};\n","'use strict';\nvar regexpExec = require('./_regexp-exec');\nrequire('./_export')({\n  target: 'RegExp',\n  proto: true,\n  forced: regexpExec !== /./.exec\n}, {\n  exec: regexpExec\n});\n","var signals = {\n  methods: {\n    SIGNAL_CLEAR_TERM(sender, receiver = 'cli', slot = 'slotClearTerm') {\n      return {\n        event: \"clearTerm\",\n        sender: sender,\n        receiver: receiver,\n        slot: slot,\n        kwargs: {\n          who: 'editor'\n        }\n      }\n    },\n    SIGNAL_UNLOCK(sender, receiver = 'parent', slot = 'slotUnlock'){\n      return {\n        event: \"unlock\",\n        sender: sender,\n        receiver: receiver,\n        slot: slot,\n        kwargs: {}\n      }\n    },\n\n    SIGNAL_SAVE_FILE(sender, receiver = 'cli', slot = 'slotPutFile'){\n      var fileData = new TextEncoder().encode(\n        this.code.replace(/\\r\\n/g, \"\\n\")\n      );\n    \n      return {\n        event: \"saveFile\",\n        sender: sender,\n        receiver: receiver,\n        slot: slot,\n        kwargs: {\n          filename: this.openedFile,\n          fileData: fileData\n        }\n      }\n    },\n\n  }\n}\n\nexport default signals\n","var toInteger = require('./_to-integer');\nvar defined = require('./_defined');\n// true  -> String#at\n// false -> String#codePointAt\nmodule.exports = function (TO_STRING) {\n  return function (that, pos) {\n    var s = String(defined(that));\n    var i = toInteger(pos);\n    var l = s.length;\n    var a, b;\n    if (i < 0 || i >= l) return TO_STRING ? '' : undefined;\n    a = s.charCodeAt(i);\n    return a < 0xd800 || a > 0xdbff || i + 1 === l || (b = s.charCodeAt(i + 1)) < 0xdc00 || b > 0xdfff\n      ? TO_STRING ? s.charAt(i) : a\n      : TO_STRING ? s.slice(i, i + 2) : (a - 0xd800 << 10) + (b - 0xdc00) + 0x10000;\n  };\n};\n"],"sourceRoot":""}